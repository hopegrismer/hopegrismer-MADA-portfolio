[
  {
    "objectID": "presentation-exercise/fight-songs/presentation-exercise.html",
    "href": "presentation-exercise/fight-songs/presentation-exercise.html",
    "title": "Fight Songs",
    "section": "",
    "text": "College fight songs are a key part of the game-day experience. The most memorable songs are celebrated and shouted during iconic events like the Heisman Trophy presentation, while the less notable fade into obscurity.\nIn this analysis and displayed in the graph on “Five Thirty Eight”, we collected fight songs from 65 schools across the Power Five conferences (ACC, Big Ten, Big 12, Pac-12, SEC) and Notre Dame. I found this to be super interesting as it examined common lyrical elements, such as chants and spelling, CLICHES because we know how common those are!!, as well as analyzed the tempo and duration of each song (based on available Spotify versions) to understand how these schools are musically propelled to victory.\n# Load the knitr package\nlibrary(knitr)\n\n# Load the here package\nlibrary(here)\n\nhere() starts at /Users/hopegrismercomputer/Desktop/MADA-course/hopegrismer-MADA-portfolio\n\n# Use include_graphics to display the PNG image with correct path using here()\n\ninclude_graphics(here(\"presentation-exercise\", \"fight-songs\", \"presentation-results-exercise\", \"presentation-results-plots\", \"Graph_of_Fight_Songs.png\"))\nAbove is the graph that I attempted to recreate.\n# Load and install required libraries\nlibrary(ggplot2)\ninstall.packages(\"here\")\n\n\nThe downloaded binary packages are in\n    /var/folders/29/tsfhn2w952x9r8f27_hpzq900000gn/T//RtmpMwwGdj/downloaded_packages\n\nlibrary(here)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggrepel)  # Load the ggrepel package\n\n# Set the correct relative path to the CSV file inside the 'fight-songs' subfolder\ndata &lt;- read.csv(here(\"presentation-exercise\", \"fight-songs\", \"fight-songs.csv\"))\nI was able to download the original data. I recalculated the average valuesfor duration and BPM. I knew this was an important first step as these values are displayed as the quadrant boundaries on both the x and y axes.\n# Calculate average values for duration and BPM\navg_duration &lt;- mean(data$sec_duration, na.rm = TRUE)\navg_bpm &lt;- mean(data$bpm, na.rm = TRUE)\nNext, the four-quadrant plot was created. Many iterations of this code was requested from the AI because of the difficulties with school labels overlapping with the quadrant labels. This is something that the original data was able to avoid by creating an interactive overlay so labels are only shown if one’s cursor selects it. This is outside my current skills, but I am interested in whether this can be done within R or requires additional tech/platforms/extensions etc. I ended up switching the orientation of the labels to try to accomodate the right side.\n# Create the four-quadrant plot \nplot = ggplot(data, aes(x = sec_duration, y = bpm, label = school)) +  # Adjusted column names\n  geom_point(aes(color = school), size = 3, alpha = 0.7) +  # Add alpha for transparency, points for each university team\n  geom_hline(yintercept = avg_bpm, linetype = \"dashed\", color = \"lightgrey\") +  # Light grey horizontal line for average BPM\n  geom_vline(xintercept = avg_duration, linetype = \"dashed\", color = \"lightgrey\") +  # Light grey vertical line for average duration\n  geom_text_repel(aes(label = school), size = 3, max.overlaps = Inf, box.padding = 0.5, force = 10) +  # Repel text labels with more space\n  labs(\n    title = \"Fight Songs Quadrant Plot\",\n    x = \"Song Duration (seconds)\",\n    y = \"Beats Per Minute (BPM)\"\n  ) +\n  theme_minimal(base_size = 14) +  # Increase base font size for better readability\n  theme(\n    legend.position = \"none\",  # Remove legend for cleaner look\n    plot.margin = margin(10, 10, 10, 10),  # Increase margins to avoid cutting off labels\n    plot.title = element_text(hjust = 0.5)  # Center the title\n  ) +\n  # Annotate the quadrant labels vertically in the corners, adjusted laterally\n  # Top-left quadrant (\"Fast and Short\") - moved up a bit\n  annotate(\"text\", x = avg_duration * 0.15, y = 120, label = \"Fast and Short\", color = \"blue\", size = 4, angle = 0, fontface = \"bold\") +  # Moved up slightly\n  # Top-right quadrant (\"Fast but Long\") - moved slightly further right\n  annotate(\"text\", x = avg_duration * 2.3, y = avg_bpm * 1.1, label = \"Fast but Long\", color = \"blue\", size = 4, angle = 90, fontface = \"bold\") +  # Bolded text\n  # Bottom-left quadrant (\"Short but Slow\")\n  annotate(\"text\", x = avg_duration * 0.05, y = avg_bpm * 0.7, label = \"Short but Slow\", color = \"blue\", size = 4, angle = 90, fontface = \"bold\") +  # Bolded text\n  # Bottom-right quadrant (\"Slow and Long\")\n  annotate(\"text\", x = avg_duration * 1.95, y = avg_bpm * 0.7, label = \"Slow and Long\", color = \"blue\", size = 4, angle = 90, fontface = \"bold\")  # Bolded text\nHere is the quadrant plot I was able to generate below.\n# Print the plot\nprint(plot)\n\n\n\n\n\n\n\n# Save the plot into the \"fight-songs\" folder with a white background\nggsave(\"./presentation-results-exercise/presentation-results-plots/fight_song_quadrant_plot.png\", plot = plot, width = 10, height = 8, dpi = 300, bg = \"white\")\nI ended up putting my final code back into AI to see what prompt it thinks would generate my final version. This was the output:\nAI Prompt: Generate a Quarto document that does the following: Introduction: Write an introduction about college fight songs, explaining how they are an integral part of the college experience and how the best ones are celebrated while the less memorable ones fade into obscurity. Include a section about an analysis of 65 school fight songs, collected from the Power Five conferences (ACC, Big Ten, Big 12, Pac-12, SEC) and Notre Dame. The analysis includes an exploration of common lyrical elements (such as chants and spelling) and an examination of the tempo and duration of the songs (based on Spotify data). Graph Section: Display a PNG image, titled “Graph of Fight Songs,” that is located in a specific path (presentation-results-plots folder). Use the knitr package to include the image with the correct file path using the here() function. Data Loading and Preparation: Load necessary libraries (e.g., ggplot2, dplyr, ggrepel, here). Load the data from a CSV file that is located in the presentation-exercise/fight-songs folder, using the read.csv() function and the here() package for path management. Analysis: Calculate the average duration and beats per minute (BPM) for the songs. Use the calculated averages for plotting the data, showing the boundaries for the quadrants on the x and y axes. Quadrant Plot Creation: Create a four-quadrant plot using ggplot2. The plot should display each song with its duration (x-axis) and BPM (y-axis). Include repelling text labels to avoid overlap. Annotate the quadrants (e.g., “Fast and Short,” “Fast but Long,” etc.) with text labels. Add dashed lines for the average BPM and duration. Saving the Plot: Save the generated plot in the presentation-results-exercise/presentation-results-plots folder with a white background. Make sure the explanations and commentary about the analysis are clearly written for non-technical readers.\nI found feeding back the code to AI and asking what would have been efficient in generating the output is an interesting loop to pursue."
  },
  {
    "objectID": "presentation-exercise/fight-songs/presentation-exercise.html#part-two---creating-a-high-quality-table",
    "href": "presentation-exercise/fight-songs/presentation-exercise.html#part-two---creating-a-high-quality-table",
    "title": "Fight Songs",
    "section": "Part Two - Creating a High-Quality Table",
    "text": "Part Two - Creating a High-Quality Table\nI am genuinely proud of my table. I started with a general table output via a AI template structure from the following prompt: Use the same dataset you used for the graph (or a subset) to create a table that is representative of the data set. Make sure it includes meaningful metrics like song duration and beats per minute (BPM) and BPM Comparison to correspond with the quadrants.\nThe orignal table had column headings that matched the raw data’s table’s headings. I renamed each to best display the data more professionally.\n\n# Load necessary libraries\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(dplyr)\n\n# Assuming you have a dataset 'data' with the necessary columns\n\n# Calculate summary values (if you haven't done it yet)\nsummary_table &lt;- data %&gt;%\n  mutate(\n    avg_duration = mean(sec_duration, na.rm = TRUE),\n    avg_bpm = mean(bpm, na.rm = TRUE),\n    bpm_comparison = ifelse(bpm &gt; avg_bpm, \"Above Average\", \"Below Average\"),\n    duration_diff = sec_duration - avg_duration,\n    bpm_diff = bpm - avg_bpm\n  )\n\n# Select only the relevant columns for the table\nsummary_table &lt;- summary_table %&gt;%\n  select(school, bpm_comparison, duration_diff, bpm_diff)\n\n# Rename the columns for clarity\ncolnames(summary_table) &lt;- c(\"School\", \n                             \"BPM Comparison (Above/Below Average)\", \n                             \"Difference from Mean Duration (Seconds)\", \n                             \"Difference from Mean BPM\")\n\n# Create and style the table using kable and kableExtra\nsummary_table %&gt;%\n  kable(\"html\", caption = \"Summary of Fight Songs with Differences from the Mean\") %&gt;%\n  kable_styling(full_width = TRUE, position = \"center\", font_size = 12) %&gt;%\n  column_spec(1, bold = TRUE, color = \"white\", background = \"#0073e6\") %&gt;%\n  column_spec(2, color = \"darkblue\") %&gt;%\n  column_spec(3, color = \"green\") %&gt;%\n  column_spec(4, color = \"orange\") %&gt;%\n  row_spec(0, bold = TRUE, background = \"#d9d9d9\") %&gt;%\n  row_spec(1:nrow(summary_table), color = \"black\", \n           background = ifelse(summary_table$`BPM Comparison (Above/Below Average)` == \"Above Average\", \"#e6f7ff\", \"#ffe6e6\")) %&gt;%\n  footnote(general = \"The above table summarizes key metrics of the fight songs, including their duration, BPM, and how they compare to the average-- both categorically and quantitatively.\", \n           general_title = \"Footnote\", \n           footnote_as_chunk = TRUE)\n\n\nSummary of Fight Songs with Differences from the Mean\n\n\nSchool\nBPM Comparison (Above/Below Average)\nDifference from Mean Duration (Seconds)\nDifference from Mean BPM\n\n\n\n\nNotre Dame\nAbove Average\n-7.9076923\n23.2\n\n\nBaylor\nBelow Average\n27.0923077\n-52.8\n\n\nIowa State\nAbove Average\n-16.9076923\n26.2\n\n\nKansas\nAbove Average\n-9.9076923\n8.2\n\n\nKansas State\nBelow Average\n-4.9076923\n-48.8\n\n\nOklahoma\nAbove Average\n-34.9076923\n24.2\n\n\nOklahoma State\nAbove Average\n-42.9076923\n51.2\n\n\nTexas\nBelow Average\n-6.9076923\n-47.8\n\n\nTCU\nAbove Average\n-24.9076923\n20.2\n\n\nTexas Tech\nAbove Average\n-17.9076923\n30.2\n\n\nWest Virginia\nAbove Average\n20.0923077\n23.2\n\n\nIllinois\nAbove Average\n-11.9076923\n33.2\n\n\nIndiana\nAbove Average\n-8.9076923\n21.2\n\n\nIowa\nAbove Average\n0.0923077\n21.2\n\n\nMaryland\nAbove Average\n-15.9076923\n13.2\n\n\nMichigan\nBelow Average\n50.0923077\n-45.8\n\n\nMichigan State\nAbove Average\n40.0923077\n16.2\n\n\nMinnesota\nAbove Average\n-11.9076923\n22.2\n\n\nNebraska\nAbove Average\n22.0923077\n7.2\n\n\nNorthwestern\nAbove Average\n-14.9076923\n11.2\n\n\nOhio State\nAbove Average\n17.0923077\n49.2\n\n\nPenn State\nAbove Average\n9.0923077\n16.2\n\n\nPurdue\nAbove Average\n14.0923077\n31.2\n\n\nRutgers\nBelow Average\n2.0923077\n-53.8\n\n\nWisconsin\nAbove Average\n62.0923077\n3.2\n\n\nArizona\nAbove Average\n11.0923077\n15.2\n\n\nArizona State\nAbove Average\n34.0923077\n21.2\n\n\nCalifornia\nAbove Average\n16.0923077\n5.2\n\n\nColorado\nAbove Average\n-44.9076923\n22.2\n\n\nOregon\nBelow Average\n8.0923077\n-63.8\n\n\nOregon State\nAbove Average\n-8.9076923\n8.2\n\n\nStanford\nAbove Average\n-8.9076923\n6.2\n\n\nUCLA\nBelow Average\n-2.9076923\n-56.8\n\n\nUSC\nBelow Average\n-11.9076923\n-53.8\n\n\nUtah\nAbove Average\n-5.9076923\n39.2\n\n\nWashington\nAbove Average\n17.0923077\n10.2\n\n\nWashington State\nBelow Average\n-7.9076923\n-47.8\n\n\nAlabama\nAbove Average\n-12.9076923\n24.2\n\n\nArkansas\nBelow Average\n16.0923077\n-51.8\n\n\nAuburn\nBelow Average\n-44.9076923\n-51.8\n\n\nFlorida\nBelow Average\n-5.9076923\n-57.8\n\n\nGeorgia\nAbove Average\n-30.9076923\n33.2\n\n\nKentucky\nBelow Average\n-19.9076923\n-49.8\n\n\nLSU\nAbove Average\n11.0923077\n39.2\n\n\nMississippi\nAbove Average\n-6.9076923\n24.2\n\n\nMississippi State\nAbove Average\n-17.9076923\n17.2\n\n\nMissouri\nAbove Average\n14.0923077\n9.2\n\n\nSouth Carolina\nAbove Average\n-7.9076923\n24.2\n\n\nTennessee\nAbove Average\n-18.9076923\n20.2\n\n\nTexas A&M\nBelow Average\n100.0923077\n-11.8\n\n\nVanderbilt\nBelow Average\n-26.9076923\n-56.8\n\n\nBoston College\nAbove Average\n12.0923077\n18.2\n\n\nClemson\nAbove Average\n6.0923077\n16.2\n\n\nDuke\nAbove Average\n-13.9076923\n10.2\n\n\nFlorida State\nAbove Average\n20.0923077\n6.2\n\n\nGeorgia Tech\nAbove Average\n-3.9076923\n19.2\n\n\nLouisville\nAbove Average\n8.0923077\n10.2\n\n\nMiami\nBelow Average\n1.0923077\n-53.8\n\n\nNorth Carolina\nAbove Average\n-33.9076923\n29.2\n\n\nNorth Carolina State\nBelow Average\n10.0923077\n-38.8\n\n\nPitt\nBelow Average\n38.0923077\n-49.8\n\n\nSyracuse\nAbove Average\n13.0923077\n8.2\n\n\nVirginia\nBelow Average\n-29.9076923\n-16.8\n\n\nVirginia Tech\nAbove Average\n-0.9076923\n4.2\n\n\nWake Forest\nAbove Average\n-2.9076923\n17.2\n\n\n\nFootnote  The above table summarizes key metrics of the fight songs, including their duration, BPM, and how they compare to the average-- both categorically and quantitatively."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Hope Grismer's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Hope Grismer's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Hope Grismer's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Hope Grismer's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Hope Grismer's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/hopegrismercomputer/Desktop/MADA-course/hopegrismer-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  character                1     \n  factor                   1     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: character ────────────────────────────────────────────────────\n  skim_variable                 n_missing complete_rate min max empty n_unique\n1 Favorite Typical Pizza Flavor         0             1   6   9     0        3\n  whitespace\n1          0\n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate   mean    sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.   16.0  133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1  21.2   45  55  70  80  110 ▇▂▃▂▂\n3 Shoe Size             0             1   7.89  2.09   5   7   8   9   11 ▇▇▃▇▇\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible.\nGuozheng’s work:\nBelow is a boxplot of height grouped by favorite typical pizza flavor.\n\np5 &lt;- mydata %&gt;% ggplot(aes(x=`Favorite Typical Pizza Flavor`, y=Height)) + \n  geom_boxplot(color=\"firebrick3\") + \n  theme_bw() +\n  theme(axis.title.x = element_text(size=20, face=\"bold\"),\n        axis.title.y = element_text(size=20, face=\"bold\"),\n        axis.text.x = element_text(size=15),\n        axis.text.y = element_text(size=15))\nplot(p5)\n\n\n\n\n\n\n\nfigure_file=here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-pizza-boxplot.png\")\nggsave(filename = figure_file, plot=p5) \n\nSaving 7 x 5 in image\n\n\nBelow is a scatterplot of shoe size ~ weight.\n\np6 &lt;- mydata %&gt;% ggplot(aes(x=Weight, y=`Shoe Size`)) + \n  geom_point(size=2, color=\"firebrick3\") + \n  theme_bw() +\n  theme(axis.title.x = element_text(size=20, face=\"bold\"),\n        axis.title.y = element_text(size=20, face=\"bold\"),\n        axis.text.x = element_text(size=15),\n        axis.text.y = element_text(size=15))\nplot(p6)\n\n\n\n\n\n\n\nfigure_file=here(\"starter-analysis-exercise\",\"results\",\"figures\",\"shoesize-weight-scatterplot.png\")\nggsave(filename = figure_file, plot=p6) \n\nSaving 7 x 5 in image"
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Hope Grismer's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Hope Grismer's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "The structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nThe dataset originally contained a collection of personal and preference-related information, primarily focused on physical attributes. The variables in the dataset are as follows: height, weight, and gender. The variable attributes of shoe size in men’s US standard sizing and favorite pizza flavors among the four options of sausage, cheese, supreme, and pepperoni were added to the file."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871\n\n\n\n\n\n\n\n\n\n\n\n\nTable 3: Linear model fit table.\n\n\n\n\n\n\n\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n148.192308\n33.858903\n4.3767605\n0.0071764\n\n\nFavorite.Pizza.FlavorPepperoni\n7.884615\n17.777558\n0.4435151\n0.6759271\n\n\nFavorite.Pizza.FlavorSupreme\n21.346154\n22.542078\n0.9469470\n0.3871485\n\n\nShoe.Size\n1.692308\n4.311691\n0.3924928\n0.7108678\n\n\n\n\n\n\n\n\n(resulttable3?) shows a linear model fit table of height as predicted by one’s favorite pizza flavor and the individual’s shoe size\n\n\n\n\n\n\n\n\nFigure 2: Boxplot of Height as a Function of Favorite Pizza Flavors.\n\n\n\n\n\nFigure 2 displays a box plot of height as a function of one’s favorite pizza flavor\n\n\n\n\n\n\n\n\nFigure 3: Scatterplot of Weight v. Shoe Size.\n\n\n\n\n\nFigure 3 displays a scatter plot of weight vs. shoe size"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better.\n\nprint"
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Hope Grismer's Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nhere() starts at /Users/hopegrismercomputer/Desktop/MADA-course/hopegrismer-MADA-portfolio\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\nlibrary(ggplot2)\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/hopegrismercomputer/Desktop/MADA-course/hopegrismer-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\nlibrary(dplyr) #for data processing/cleaning\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\n\nhere() starts at /Users/hopegrismercomputer/Desktop/MADA-course/hopegrismer-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name`               `Variable Definition`           `Allowed Values`\n  &lt;chr&gt;                         &lt;chr&gt;                           &lt;chr&gt;           \n1 Height                        height in centimeters           numeric value &gt;…\n2 Weight                        weight in kilograms             numeric value &gt;…\n3 Gender                        identified gender (male/female… M/F/O/NA        \n4 Shoe Size                     shoe size in US sizing (mens/w… numeric value &gt;0\n5 Favorite Typical Pizza Flavor favorite popular pizza flavors  pepperoni, chee…\n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height                          &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"…\n$ Weight                          &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7…\n$ Gender                          &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M…\n$ `Shoe Size`                     &lt;dbl&gt; 9, 7, 6, 5, 7, 7, 10, 11, 9, 10, 6, 5,…\n$ `Favorite Typical Pizza Flavor` &lt;chr&gt; \"Pepperoni\", \"Cheese\", \"Sausage\", \"Sup…\n\nsummary(rawdata)\n\n    Height              Weight          Gender            Shoe Size     \n Length:14          Min.   :  45.0   Length:14          Min.   : 5.000  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.: 6.250  \n Mode  :character   Median :  70.0   Mode  :character   Median : 7.500  \n                    Mean   : 602.7                      Mean   : 7.786  \n                    3rd Qu.:  90.0                      3rd Qu.: 9.000  \n                    Max.   :7000.0                      Max.   :11.000  \n                    NA's   :1                                           \n Favorite Typical Pizza Flavor\n Length:14                    \n Class :character             \n Mode  :character             \n                              \n                              \n                              \n                              \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender `Shoe Size` `Favorite Typical Pizza Flavor`\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt;                          \n1 180        80 M                9 Pepperoni                      \n2 175        70 O                7 Cheese                         \n3 sixty      60 F                6 Sausage                        \n4 178        76 F                5 Supreme                        \n5 192        90 NA               7 Sausage                        \n6 6          55 F                7 Cheese                         \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Typical Pizza Flavor\n0\n1\n6\n9\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55.00\n70.0\n90\n7000\n▇▁▁▁▁\n\n\nShoe Size\n0\n1.00\n7.79\n1.93\n5\n6.25\n7.5\n9\n11\n▇▆▂▆▆\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Typical Pizza Flavor\n0\n1\n6\n9\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nShoe Size\n0\n1.00\n7.92\n1.93\n5\n7.00\n8\n9\n11\n▇▇▂▇▇\n\n\n\n\nhist(d1$Height)\n\n\n\n\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Typical Pizza Flavor\n0\n1\n6\n9\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nShoe Size\n0\n1.00\n7.92\n1.93\n5\n7.00\n8\n9\n11\n▇▇▂▇▇\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nFavorite Typical Pizza Flavor\n0\n1\n6\n9\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nShoe Size\n0\n1\n7.91\n1.92\n5\n7.0\n8\n9\n11\n▅▇▂▇▅\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFavorite Typical Pizza Flavor\n0\n1\n6\n9\n0\n4\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\nShoe Size\n0\n1\n7.91\n1.92\n5\n7.0\n8\n9\n11\n▅▇▂▇▅\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFavorite Typical Pizza Flavor\n0\n1\n6\n9\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nShoe Size\n0\n1\n7.89\n2.09\n5\n7\n8\n9\n11\n▇▇▃▇▇\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata2 &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata2, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Hope Grismer's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Hope Grismer's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "cdcdata-exercise/statistical-analysis-cdcdata-exercise.html",
    "href": "cdcdata-exercise/statistical-analysis-cdcdata-exercise.html",
    "title": "CDC Data Analysis Exercise",
    "section": "",
    "text": "# Install the 'here' package \n# Set CRAN mirror globally\noptions(repos = c(CRAN = \"https://cloud.r-project.org/\"))\ninstall.packages(\"here\")\n\n\nThe downloaded binary packages are in\n    /var/folders/29/tsfhn2w952x9r8f27_hpzq900000gn/T//Rtmp3aZU4y/downloaded_packages\n\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(here)  # Load the 'here' package\n\nhere() starts at /Users/hopegrismercomputer/Desktop/MADA-course/hopegrismer-MADA-portfolio\n\n# Load the dataset using here::here() for the file path\ndata &lt;- read.csv(here(\"cdcdata-exercise\", \"Weekly_Influenza_Vaccination_Coverage_Among_Pregnant_Women_18-49_Years__by_Race_and_Ethnicity_20250205.csv\"))\n\n\n# Visualize vaccination coverage by race and ethnicity\nbarplot1iteration = ggplot(data, aes(x = Percent, fill = Race.and.Ethnicity)) + \n    geom_histogram(binwidth = 100, color = \"black\", position = \"dodge\") +\n    labs(title = \"Vaccination Coverage Distribution by Race and Ethnicity - First Iteration\",\n         x = \"Vaccination Coverage (%)\",\n         y = \"Frequency\") +\n    theme_minimal()\n\n# Save first iteration of barplot\nfigure_file = here(\"cdcdata-exercise\",\"cdcdata-exercise-tables-graphs\",\"barplot-coverage-by-race-first-iteration.png\")\nggsave(filename = figure_file, plot=barplot1iteration)\n\nSaving 7 x 5 in image\n\n# Print  first iteration of barplot\nprint(\"barplot-coverage-by-race-first-iteration.png\")\n\n[1] \"barplot-coverage-by-race-first-iteration.png\"\n\n\n\n# There is negative vaccination coverage (like -50%) appearing on histogram which doesn’t make sense in context. \n# Check for any negative values in the Percent column\nnegative_values &lt;- data %&gt;% filter(Percent &lt; 0)\nprint(negative_values)\n\n[1] Week_Ending_Date   Race.and.Ethnicity Percent            Flu.Season        \n[5] Denominator        Date.Order         Race.Sort.Order   \n&lt;0 rows&gt; (or 0-length row.names)\n\n# Visualize vaccination coverage by race and ethnicity with updated BINS\nggplot(data, aes(x = Percent, fill = Race.and.Ethnicity)) + \n    geom_histogram(binwidth = 10, color = \"black\", position = \"dodge\") +\n    labs(title = \"Vaccination Coverage Distribution by Race and Ethnicity\",\n         x = \"Vaccination Coverage (%)\",\n         y = \"Frequency\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\n#### ------- Making the Distributions ----- ###\n\n# Summarize vaccination coverage by race and ethnicity\ndata_summary &lt;- data %&gt;%\n    group_by(Race.and.Ethnicity) %&gt;%\n    summarize(avg_vaccination_coverage = mean(Percent, na.rm = TRUE))\n\n# View the summary data\nprint(data_summary)\n\n# A tibble: 9 × 2\n  Race.and.Ethnicity                     avg_vaccination_coverage\n  &lt;chr&gt;                                                     &lt;dbl&gt;\n1 American Indian / Alaska Native, NH                        28.2\n2 Asian, NH                                                  42.9\n3 Black, NH                                                  22.4\n4 Hispanic/Latino                                            32.2\n5 Multiple/Other, NH                                         32.4\n6 Native Hawaiian / Pacific Islander, NH                     30.3\n7 Overall                                                    32.6\n8 Unknown                                                    25.0\n9 White, NH                                                  33.2\n\n# Boxplot of vaccination coverage by race and ethnicity\nbloxplot1 = ggplot(data, aes(x = Race.and.Ethnicity, y = Percent, fill = Race.and.Ethnicity)) + \n    geom_boxplot() + \n    labs(title = \"Vaccination Coverage by Race and Ethnicity\",\n         x = \"Race and Ethnicity\",\n         y = \"Vaccination Coverage (%)\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x labels for better readability +\ntheme(\n    panel.background = element_rect(fill = \"white\"),  # White background for the plot panel\n    plot.background = element_rect(fill = \"white\")    # White background for the overall plot\n)\n\nList of 2\n $ panel.background:List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : NULL\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n $ plot.background :List of 5\n  ..$ fill         : chr \"white\"\n  ..$ colour       : NULL\n  ..$ linewidth    : NULL\n  ..$ linetype     : NULL\n  ..$ inherit.blank: logi FALSE\n  ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE\n\n#Save bloxplot1 \nfigure_file = here(\"cdcdata-exercise\",\"cdcdata-exercise-tables-graphs\",\"bloxplot-coverage-by-race.png\")\nggsave(filename = figure_file, plot=bloxplot1)\n\nSaving 7 x 5 in image\n\n\n\n# Summarize the data by Race and Ethnicity to calculate the mean and standard deviation\ndata_summary &lt;- data %&gt;%\n    group_by(Race.and.Ethnicity) %&gt;%\n    summarize(\n        avg_vaccination_coverage = mean(Percent, na.rm = TRUE),\n        sd_vaccination_coverage = sd(Percent, na.rm = TRUE)\n    )\n\n# View the summary data\nprint(data_summary)\n\n# A tibble: 9 × 3\n  Race.and.Ethnicity               avg_vaccination_cove…¹ sd_vaccination_cover…²\n  &lt;chr&gt;                                             &lt;dbl&gt;                  &lt;dbl&gt;\n1 American Indian / Alaska Native…                   28.2                   15.9\n2 Asian, NH                                          42.9                   22.7\n3 Black, NH                                          22.4                   12.6\n4 Hispanic/Latino                                    32.2                   17.8\n5 Multiple/Other, NH                                 32.4                   17.6\n6 Native Hawaiian / Pacific Islan…                   30.3                   17.4\n7 Overall                                            32.6                   18.0\n8 Unknown                                            25.0                   14.7\n9 White, NH                                          33.2                   18.8\n# ℹ abbreviated names: ¹​avg_vaccination_coverage, ²​sd_vaccination_coverage\n\n\n\n# Load necessary libraries\nlibrary(ggplot2)\n\n# Create a bar plot showing the mean vaccination coverage with standard deviation as error bars\nbarplot1 = ggplot(data_summary, aes(x = Race.and.Ethnicity, y = avg_vaccination_coverage, fill = Race.and.Ethnicity)) +\n    geom_bar(stat = \"identity\", color = \"black\", show.legend = FALSE) +  # Bar plot\n    geom_errorbar(aes(ymin = avg_vaccination_coverage - sd_vaccination_coverage, \n                      ymax = avg_vaccination_coverage + sd_vaccination_coverage), \n                  width = 0.2) +  # Add error bars for SD\n    labs(title = \"Mean Vaccination Coverage by Race and Ethnicity with Standard Deviation\",\n         x = \"Race and Ethnicity\",\n         y = \"Vaccination Coverage (%)\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability\n\n#Save barplot1 showing the mean vaccination coverage with sd error bars\nfigure_file = here(\"cdcdata-exercise\",\"cdcdata-exercise-tables-graphs\",\"barplot-meanwithsd-by-race.png\")\nggsave(filename = figure_file, plot=barplot1)\n\nSaving 7 x 5 in image\n\n\n\n#### To visualize the distribution of vaccination coverage (like a bell curve or a smooth curve) for each race/ethnicity group\n# Load necessary libraries\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Create a density plot for vaccination coverage by race/ethnicity\ndensityplot1 = ggplot(data, aes(x = Percent, fill = Race.and.Ethnicity, color = Race.and.Ethnicity)) +\n    geom_density(alpha = 0.4) +  # alpha for transparency\n    labs(title = \"Density Plot of Vaccination Coverage by Race and Ethnicity\",\n         x = \"Vaccination Coverage (%)\",\n         y = \"Density\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x labels for readability\n    scale_fill_brewer(palette = \"Spectral\") +  # Custom color palette\n    scale_color_brewer(palette = \"Spectral\")  # Custom color palette for lines\n\n#Save density plot for vaccination coverage by race/ethnicity\nfigure_file = here(\"cdcdata-exercise\",\"cdcdata-exercise-tables-graphs\",\"density-plot-vaxcov-by-race.png\")\nggsave(filename = figure_file, plot=densityplot1)\n\nSaving 7 x 5 in image"
  }
]